{
	"info": {
		"_postman_id": "51bd2345-6b30-4b9b-a00e-c0e43d221dbf",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e935a6d-725b-4c11-b779-517d81a22122",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});",
							"console.log(pm.response.text())"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "first2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "07ba41a7-2dff-4180-af54-251079f1f189",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response Body is Json\", function () {",
							"    let jsonResponse = pm.response.json();",
							"});",
							"",
							"",
							"pm.test(\"Your name\", function () {",
							"    let jsonResponse = pm.response.json();",
							"    pm.expect(jsonResponse.name).to.eql('Tatsiana');",
							"});",
							"//console.log(jsonResponse.name);",
							"pm.test(\"Your age\", function () {",
							"    let jsonResponse = pm.response.json();",
							"    pm.expect(jsonResponse.age).to.eql('25');",
							"});",
							"//console.log(jsonResponse.age);",
							"pm.test(\"Your salary\", function () {",
							"    let jsonResponse = pm.response.json();",
							"    pm.expect(jsonResponse.salary).to.eql(1000);",
							"});",
							"//console.log(jsonResponse.salary);",
							"",
							"let requestData = request.data; //данные запроса из боди (form-data)",
							"let jsonResponse = pm.response.json();",
							"",
							"pm.test(\"The same Name\", function () {",
							"    pm.expect(jsonResponse.name).to.eql(requestData.name);",
							"});",
							"//console.log(requestData.name)",
							"pm.test(\"The same age\", function () {",
							"    pm.expect(jsonResponse.age).to.eql(requestData.age);",
							"});",
							"//console.log(jsonResponse.age)",
							"",
							"//let salary_1 = +requestData.salary;",
							"let salary_1 = parseInt(requestData.salary)",
							"//console.log(parseInt(requestData.salary))",
							"pm.test(\"The same salary\", function () {",
							"    pm.expect(jsonResponse.salary).to.eql(salary_1);",
							"});",
							"",
							"console.log(jsonResponse.family);",
							"",
							"pm.test(\"The u_salary_1_5_year\", function () {",
							"    pm.expect(jsonResponse.family.u_salary_1_5_year).to.eql((requestData.salary)*4);",
							"});",
							"",
							"console.log(jsonResponse.salary)",
							"console.log(typeof requestData.salary)",
							"console.log((requestData.salary)*4)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tatsiana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "first3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8a6686d0-bb4d-423d-9092-57e5c8c27892",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"let jsonResponse = pm.response.json();",
							"let Request = pm.request.url.query.toObject();",
							"",
							"pm.test(\"The same name\", function () {",
							"    pm.expect(jsonResponse.name).to.eql(Request.name);",
							"});",
							"",
							"pm.test(\"The same age\", function () {",
							"    pm.expect(jsonResponse.age).to.eql(Request.age);",
							"});",
							"//console.log(Request.age)",
							"//console.log(jsonResponse.age)",
							"",
							"let salary_1 = parseInt(Request.salary)",
							"pm.test(\"The same salary\", function () {",
							"    pm.expect(jsonResponse.salary).to.eql(salary_1);",
							"});",
							"//console.log(typeof Request.salary)",
							"//console.log(typeof salary_1)",
							"//console.log(salary_1)",
							"",
							"console.log(jsonResponse.family)",
							"//console.log(jsonResponse.family.children[0])",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"dog name\", function () {",
							"    pm.expect(jsonResponse.family.pets.dog.name).to.eql('Luky');",
							"});",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"dog name,age\", function () {",
							"    pm.expect(jsonResponse.family.pets.dog).to.have.all.keys('name','age');",
							"});",
							"//console.log(jsonResponse.family.pets.dog)",
							"",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"dog name1\", function () {",
							"    pm.expect(jsonResponse.family.pets.dog).to.have.property('name')",
							"});",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"dog age1\", function () {",
							"    pm.expect(jsonResponse.family.pets.dog).to.have.property('age')",
							"});",
							"//12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"dog age4\", function () {",
							"    pm.expect(jsonResponse.family.pets.dog.age).to.eql(4);",
							"}); ",
							"//console.log(typeof jsonResponse.family.pets.dog.age)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}object_info_3?name=Tatsiana&age=25&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tatsiana"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "first4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9cfdbf9a-2555-40e7-baf3-7012bf3bfb17",
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json",
							"let jsonResponse = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"let Request = pm.request.url.query.toObject();",
							"console.log(pm.request.url.query.toObject())",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"The same name\", function () {",
							"    pm.expect(jsonResponse.name).to.eql(Request.name);",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"let age1 = parseInt(Request.age);",
							"pm.test(\"The same age\", function () {",
							"    pm.expect(jsonResponse.age).to.eql(age1);",
							"});",
							"//console.log(age1)",
							"",
							"//7. Вывести в консоль параметр salary из request.",
							"console.log(Request.salary)",
							"",
							"//8. Вывести в консоль параметр salary из response.",
							"console.log(jsonResponse.salary) ",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(jsonResponse.salary[0]) ",
							"",
							"//10. Вывести в консоль 1-й элемент параметра salary из response.",
							"console.log(jsonResponse.salary[1]) ",
							"",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(jsonResponse.salary[2]) ",
							"",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check salary[0]\", function () {",
							"let salary0 = parseInt(Request.salary);",
							"    pm.expect(jsonResponse.salary[0]).to.eql(salary0);",
							" //console.log(salary0)",
							"});",
							"//console.log(jsonResponse.salary[0])",
							"",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check salary[1]\", function () {",
							"let salary1 = parseInt(jsonResponse.salary[1]);",
							"    pm.expect(salary1).to.eql(Request.salary*2);",
							"//console.log(salary1)",
							"});",
							"//console.log(Request.salary*2)",
							"",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Check salary[2]\", function () {",
							"let salary2 = parseInt(jsonResponse.salary[2]);",
							"    pm.expect(salary2).to.eql(Request.salary*3);",
							"console.log(salary2)",
							"});",
							"console.log(Request.salary*3)",
							"",
							"//18.Передать в окружение переменную name",
							"pm.environment.set(\"name\", jsonResponse.name);",
							"",
							"//19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", jsonResponse.age);",
							"",
							"//20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", jsonResponse.salary[0]);",
							"",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (i = 0; i < jsonResponse.salary.length; i++) {",
							"  console.log(jsonResponse.salary[i]);",
							"};",
							"for (var prop in jsonResponse.salary)  {",
							"  console.log(prop + \": \" + jsonResponse.salary[prop]);",
							"};",
							"var salary = jsonResponse.salary",
							"for (var prop in salary)  {",
							"  console.log(\"salary.\" + prop + \" = \" + salary[prop]);",
							"}",
							"console.log(jsonResponse.salary.join(\",\")) //выводит данные salary в строку",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Tatsiana&age=25&salary=1000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Tatsiana"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "first5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9a604b49-096d-4e41-9604-a0363bb12727",
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Спарсить response body в json.",
							"let jsonResponse = pm.response.json();",
							"//console.log(pm.response.json());",
							"",
							"//Спарсить request.",
							"let Request = request.data;",
							"//console.log(request.data);",
							"",
							"//Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Test start_qa_salary\", function () {",
							"    pm.expect(jsonResponse).to.have.property('start_qa_salary');",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Test qa_salary_after_6_months\", function () {",
							"    pm.expect(jsonResponse).to.have.property('qa_salary_after_6_months');",
							"});",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Test qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonResponse).to.have.property('qa_salary_after_12_months');",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Test qa_salary_after_1.5_year\", function () {",
							"    pm.expect(jsonResponse).to.have.property('qa_salary_after_1.5_year');",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Test qa_salary_after_3.5_years\", function () {",
							"    pm.expect(jsonResponse).to.have.property('qa_salary_after_3.5_years');",
							"});",
							"//Проверить, что json response имеет параметр person",
							"pm.test(\"Test person\", function () {",
							"    pm.expect(jsonResponse).to.have.property('person');",
							"});",
							"let salary = parseInt(Request.salary);",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check start_qa_salary\", function () {",
							"    pm.expect(jsonResponse.start_qa_salary).to.eql(salary);",
							"});",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_6_months\", function () {",
							"    pm.expect(jsonResponse.qa_salary_after_6_months).to.eql(salary*2);",
							"});",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonResponse.qa_salary_after_12_months).to.eql(salary*2.7);",
							"});",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_1.5_year\", function () {",
							"let salary18 = jsonResponse[\"qa_salary_after_1.5_year\"];",
							"    pm.expect(salary18).to.eql(salary*3.3);",
							"});",
							"//Проверить, что параметр qa_salary_after_3.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_3.5_year\", function () {",
							"let salary42 = jsonResponse[\"qa_salary_after_3.5_years\"];",
							"    pm.expect(salary42).to.eql(salary*3.8);",
							"});",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Check u_name\", function () {",
							"    pm.expect(jsonResponse.person.u_name[1]).to.eql(salary);",
							"});",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Check u_age\", function () {",
							"    let age = parseInt(Request.age);",
							"    pm.expect(jsonResponse.person.u_age).to.eql(age);",
							"});",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Check u_salary_5_years\", function () {",
							"let salary5 = jsonResponse.person.u_salary_5_years;",
							"//console.log(jsonResponse.person.u_salary_5_years)",
							"    pm.expect(salary5).to.eql(salary*4.2);",
							"});",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (var prop in jsonResponse.person)  {",
							"  console.log(prop + \": \" + jsonResponse.person[prop]);",
							"};",
							"var person = jsonResponse.person;",
							"for (var prop in person)  {",
							"  console.log(\"person.\" + prop + \" = \" + person[prop]);",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}